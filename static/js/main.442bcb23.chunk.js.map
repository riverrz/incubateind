{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","chargerType","success","onChangeSelect","event","_this","setState","target","value","handleForm","preventDefault","fetch","method","headers","Content-type","body","JSON","stringify","latitude","props","coords","longitude","then","res","json","resp","catch","console","log","content","this","isGeolocationAvailable","isGeolocationEnabled","react_default","a","createElement","onSubmit","name","required","onChange","type","className","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAIMA,oNACJC,MAAQ,CACNC,YAAa,eACbC,SAAS,KAEXC,eAAiB,SAAAC,GACfC,EAAKC,SAAS,CACZL,YAAaG,EAAMG,OAAOC,WAG9BC,WAAa,SAAAL,GACXA,EAAMM,iBACNC,MAAM,uCAAwC,CAC5CC,OAAQ,OACRC,QAAS,CACPC,eAAgB,qCAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUb,EAAKc,MAAMC,OAAOF,SAC5BG,UAAWhB,EAAKc,MAAMC,OAAOC,UAC7BpB,YAAaI,EAAKL,MAAMC,gBAGzBqB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACAA,EAAKvB,SACPG,EAAKC,SAAS,CACZJ,SAAS,MAIdwB,MAAMC,QAAQC,8EAGjB,IAAIC,EAAU,GAsBd,OAhBEA,EALGC,KAAKX,MAAMY,uBAEJD,KAAKX,MAAMa,qBAInBC,EAAAC,EAAAC,cAAA,QAAMC,SAAUN,KAAKrB,YACnBwB,EAAAC,EAAAC,cAAA,UACEE,KAAK,cACLC,UAAU,EACVC,SAAUT,KAAK3B,gBAEf8B,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,gBAAd,gBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,gBAAd,gBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,eAAd,eACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,eAAd,gBAEFyB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAAShC,MAAM,YAdrByB,EAAAC,EAAAC,cAAA,uCAFAF,EAAAC,EAAAC,cAAA,sDAoBLF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OAAOZ,UAxDfa,cA4DHC,uBAAW,CACxBC,gBAAiB,CACfC,oBAAoB,GAEtBC,oBAAqB,KAJRH,CAKZ5C,GCzDiBgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.442bcb23.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { geolocated } from \"react-geolocated\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    chargerType: \"Private Fast\",\n    success: false\n  };\n  onChangeSelect = event => {\n    this.setState({\n      chargerType: event.target.value\n    });\n  };\n  handleForm = event => {\n    event.preventDefault();\n    fetch(\"http://0580561e.ngrok.io/addposition\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded\"\n      },\n      body: JSON.stringify({\n        latitude: this.props.coords.latitude,\n        longitude: this.props.coords.longitude,\n        chargerType: this.state.chargerType\n      })\n    })\n      .then(res => res.json())\n      .then(resp => {\n        if (resp.success) {\n          this.setState({\n            success: true\n          });\n        }\n      })\n      .catch(console.log);\n  };\n  render() {\n    let content = \"\";\n    if (!this.props.isGeolocationAvailable) {\n      content = <p>Your browser does not support Geolocation</p>;\n    } else if (!this.props.isGeolocationEnabled) {\n      content = <p>Geolocation is not enabled</p>;\n    } else {\n      content = (\n        <form onSubmit={this.handleForm}>\n          <select\n            name=\"chargerType\"\n            required={true}\n            onChange={this.onChangeSelect}\n          >\n            <option value=\"Private Fast\">Private Fast</option>\n            <option value=\"Private Slow\">Private Slow</option>\n            <option value=\"Public Fast\">Public Fast</option>\n            <option value=\"Public Slow\">Public Slow</option>\n          </select>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n    return <div className=\"App\">{content}</div>;\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false\n  },\n  userDecisionTimeout: 5000\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}